import { exec as childProcessExec } from 'child_process';
import fs from 'fs';
import Mustache from 'mustache';
import path from 'path';
import util from 'util';

const exec = util.promisify(childProcessExec);

// Configuration.
const documentContentEncoding = 'utf-8';
const documentsDirectory = `../docs/`;
const documentTemplateCustomTags: [string, string] = ['<%', '%>'];
const documentTemplateFileNames = ['README.template.md'];
const documentOutputHeaderAutogenerated = `
[//]: # "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
[//]: # "!!!!!!                                     !!!!!!"
[//]: # "!!!!!!      >>>>> WARNING <<<<<            !!!!!!"
[//]: # "!!!!!!                                     !!!!!!"
[//]: # "!!!!!! This file is autogenerated.         !!!!!!"
[//]: # "!!!!!!                                     !!!!!!"
[//]: # "!!!!!!      >>>>> WARNING <<<<<            !!!!!!"
[//]: # "!!!!!!                                     !!!!!!"
[//]: # "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

`;

/*
 * Load JSON file.
 */
const loadJsonFileSync = (filePath: string, encoding: BufferEncoding) => {
  return JSON.parse(fs.readFileSync(filePath, encoding));
};

/*
 * Get package information.
 */
const getPackageInformation = async () => {
  // Get package information.
  console.info('[build:generate_docs] Get package information.');
  const pkg = loadJsonFileSync('package.json', documentContentEncoding);
  console.info('[build:generate_docs] Package Information:');
  console.info({
    name: pkg.name,
    version: pkg.version,
    author: pkg.author,
    description: pkg.description,
    dependencies: pkg.dependencies,
    peerDependencies: pkg.peerDependencies,
  });

  return pkg;
};

/*
 * Get git authors hours.
 */
const getGitAuthorHours = async () => {
  // Get repository information.
  console.log(`[build:generate_docs] Get git Hours.`);
  const { stdout: commandGitHoursStdout, stderr: commandGitHoursStderr } =
    await exec('jikyuu --format json');
  if (commandGitHoursStderr) {
    throw new Error(commandGitHoursStderr);
  }
  const gitHoursAuthors: {
    name: string;
    email: string;
    hours: number;
    commits: number;
  }[] = [];
  for (const author of JSON.parse(commandGitHoursStdout)) {
    const gitHoursAuthor = {
      name: author.author_name,
      email: author.email,
      hours: Number(Number(author.hours).toFixed(2)),
      commits: Number(author.commit_count),
    };
    if (gitHoursAuthor.name !== 'Total') {
      console.log(
        `    ${gitHoursAuthor.email} (${gitHoursAuthor.hours}hrs) (${gitHoursAuthor.commits}commits)`,
      );
      gitHoursAuthors.push(gitHoursAuthor);
    } else {
      console.log(
        `      Total: (${gitHoursAuthor.hours}hrs) (${gitHoursAuthor.commits}commits)`,
      );
    }
  }

  return gitHoursAuthors;
};

// Main.
const main = async () => {
  try {
    console.info('[build:generate_docs] Build documents.');

    // Create template rendering context.
    const context = {
      // Pkg.
      ...(await (async () => {
        const pkg = await getPackageInformation();

        return {
          name: pkg.name,
        };
      })()),

      // Git.
      ...(await (async () => {
        const gitHoursAuthors = await getGitAuthorHours();

        return {
          authors: gitHoursAuthors,
        };
      })()),
    };

    // Generate documents.
    for (const documentTemplateFileName of documentTemplateFileNames) {
      // Load document template.
      console.info(
        `[build:generate_docs:${documentTemplateFileName}] Load template.`,
      );
      const documentTemplate = fs.readFileSync(
        path.join(__dirname, documentsDirectory, documentTemplateFileName),
        documentContentEncoding,
      );

      // Render document.
      const documentOutput = Mustache.render(
        documentTemplate,
        context,
        {},
        documentTemplateCustomTags,
      );

      // Write document output.
      fs.writeFileSync(
        path.join(
          __dirname,
          documentsDirectory,
          documentTemplateFileName.replace('.template', ''),
        ),
        `${documentOutputHeaderAutogenerated}${documentOutput}`,
        documentContentEncoding,
      );
    }

    process.exit(0);
  } catch (e) {
    const error = e as Error;
    console.error(error ? error.message : error);
    process.exit(2);
  }
};
main();
